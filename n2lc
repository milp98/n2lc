#! /usr/bin/bash
<<BLOCK
写的烂不要怪我 [doge]
BLOCK

: "${CONFIGURATION_PATH:=./etc}"
: "${CONFIGROOM_PATH:=./connect}"
: "${BASH_SHELLNAME:="N2LC"}"
: "${BASH_IRIS:=3}"
: "${DEBUG:=0}"

function Main()
{
    declare -A Fun_State language connect config
    local i lang
    Num=0

    #载入初始化检查
    ! [ -e "${CONFIGROOM_PATH}" ] && mkdir "${CONFIGROOM_PATH}"
    ! [ -e "${CONFIGURATION_PATH}/n2n3.conf" ] && Fun_Configuration_Generation
    [ "$DEBUG" == "1" ] && { 
        local xc=0
    }

    #载入语言
    while read -r lang;do
        language[${lang%%=*}]=${lang##*=}
        [ "$DEBUG" == "1" ] && ((xc++))
    done < "./lang/${LANG%%.*}.po"

    #载入配置
    while read -r i;do 
        config[${i%%=*}]=${i##*=}
    done < "${CONFIGURATION_PATH}/n2n3.conf"

    unset i lang
    clear
    Main_Edge_Menu
}

function Main_Edge_Menu()
{
    Fun_State[Now]="Main_Edge_Menu"
    local Title_Mian="\033[42;37m${BASH_SHELLNAME} ${BASH_IRIS}\033[0m"
    local Text_Option=("${language[TO1]}" "${language[TO2]}" "${language[TO7]}")

    [ -n "$REBACK" ] && clear
    #顶栏
    Printing_Method title
    Accessibility COLUMNS1
    #功能消息返回
    [ -n "$REBACK" ] && {
        echo -e "$REBACK"
        unset REBACK
    }
    #菜单打印排序
    Printing_Method options
    echo "${language[menuT2]}"
    [ "$DEBUG" == "1" ] && {
        echo "$xc Object loaded successfully"
    }

    while [ $Num != 2 ];do
        Input_State 0
        case $INPUT in
            2 ) Approach_Edge Room_Quickly ;;
            0 ) Approach_Edge Create_Link  ;;
            1 ) Approach_Edge Load_Link    ;;
            c ) Approach_Edge Connet_Test  ;;
            e ) exit 0                     ;;
        esac
    done
}

#交互
function Approach_Edge()
{
    case $1 in
        Create_Link )
            local Edge_CheckRun
            Edge_CheckRun=$(pidof -x edge)
            [[ "$Edge_CheckRun" != "0" && -n "${Edge_CheckRun}" ]] && {
                echo -e "${language[connect_warn]}\n"
            }
            unset Edge_CheckRun
            echo -e "${language[roomName]}\n"
            
            Input_State 0
            connect[ROOM]=${INPUT}

            [ -e "${CONFIGURATION_PATH}/${INPUT}.conf" ] && {
                echo -e "${language[config_exist]} \n"
                ${Fun_State[Now]}
            }

            Connect_Server 1
        ;;
        Load_Link )
            local Title_Mian="\33[4m${language[roomName]}\033[0m\n"
            local f n1 Path
            local i=0

            Path+=($(ls -n ${CONFIGROOM_PATH}/*.conf|awk '{print $9}'))

            [ -z "$Path" ] && {
                REBACK="No File.\n"
                Main
            }

            Printing_Method title

            for f in "${Path[@]}";do
                ((i++))
                echo -e "$i | ${f:10}\n"
            done

            Input_State 1

            for f in "${Path[@]}";do
                n1=${f:10}
                [ "$DEBUG" == "1" ] && echo "$f | $n1  ${n1%%.*}" > debug.txt
                [[ "$INPUT" == "${n1%%.*}" ]] && Relink_Edge "$f"
            done

            unset i f Path

            clear

            ${Fun_State[Now]}
        ;;
        Close_Link )
            local Process Pid
            
            Pid=(${Process[@]})
            Process=($(pidof "edge"))
            Process=(${#Process[@]})

            [ ${#Process[@]} == 0 ] && unset Process

            case ${#tmp[0]} in
                0 )
                    REBACK="Associated program not found!\n"
                ;;
                * )
                    Accessibility root
                    $PERMISSION kill "${Pid[@]}"
                    echo -e "${#Process[@]}Program Kill\n\n"
                ;;
            esac
        ;;
        Room_Quickly )
            local Edge_CheckRun
            local charset="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
            connect[ROOM]="$(echo "$charset" | fold -w1 | shuf | tr -d '\n' | head -c"8")" #乱动会BOOM

            Edge_CheckRun=$(pidof -x edge)

            [[ "$Edge_CheckRun" != "0" && -n "${Edge_CheckRun}" ]] && {
                echo -e "${language[connect_warn]}\n"
            }

            connect[Node]=supernode.ntop.org

            Connect_Server 0
        ;;
        Connet_Test )
            echo -e "IP:"
            Input_State 0
            REBACK=$(Genshin_Impact_Starts connet "$INPUT")

            [ "$DEBUG" != "1" ] && clear
        ;;     
    esac
    ${Fun_State[Now]}
}

function Connect_Server()
{
    [ "$1" == "1" ] && {
        local Title_Mian=("${language[selectServer]}" 
                        " [\033[1;33m${language[Notice]}\033[0m]: ${language[NoticeMsg]}\033[0m"
                        " ${language[msg1]}\n")
        local Text_Option=("${language[TO4]}" "${language[TO5]}")

        Printing_Method titleA1
        Printing_Method options
        Input_State 1

        case $INPUT in
            0 ) connect[Node]=supernode.ntop.org     ;;
            1 ) connect[Node]=mc.satsukirin.com  ;;
            * ) connect[Node]=${INPUT%%:*}
                connect[Port]=${INPUT##*:}       ;;
        esac
    }

    Edge_StartUp_Phase
}

function Edge_StartUp_Phase()
{
    local logtime

    echo -e "${language[netdetection]} ...\n"

    Pingrsu=$(ping -c 4 "${connect[Node]}" | awk '/^rtt/{print $4}')

    [[ "$Pingrsu" =~ ^[0-9]+.[0-9]+ ]] && {
        echo -e "$Pingrsu"
    }

    ! [ -e "log" ] && mkdir log
    [ -z "${connect[Port]}" ] && connect[Port]=7654
    [ "${config[campus_network]%%,*}" == "true" ] && {
        [ "${config[campus_network]##*,}" == "udp" ] && run+=(-S1) || run+=(-S2)
    }
    [ "${config[traffic_encryption]}" == "true" ] && run+=(-H)
    [ "${config[enable_broadcast]}" == "true" ] && run+=(-E)
    [ "${config[disable_upnp]}" == "true" ] && run+=(--no-port)
    [ "${config[compress_data]}" == "lzo1x" ] && run+=(-z1)
    [ "${config[compress_data]}" == "zstd" ] && run+=(-z2)
    [ -z "${config[user_id]}" ] && config[user_id]=$(openssl rand -hex 9)

    connect[NetName]=N2Network$(($RANDOM%256))
    run+=(" -d ${connect[NetName]} ")
    run+=("-I ${config[user_id]} ")
    run+=("-c ${connect[ROOM]} ")
    run+=("-l ${connect[Node]}:${connect[Port]}")
    logtime="${PWD}/log/$(date "+%Y%m%d-%H%M%S").log"

    Accessibility root

    [ "${DEBUG}" == "1" ] && print "Debug Flag: ${run[*]}\n"
    nohup ${PERMISSION} edge ${run[*]} &> ${logtime}

    case $? in
        0 )
            local url="n2lc://$(echo "${connect[Node]}:${connect[Port]}#${connect[ROOM]}"|base64)"
            local ip=$(ip -4 a show "${connect[NetName]}" | grep -oP "(?<=inet\s)\d+(\.\d+){3}")

            REBACK="Room: ${connect[ROOM]}\nURL: ${url}\nIP: ${ip}\n"

            Create_save_configuration

            unset url ip logtime run PERMISSION TempProces TempProces1
        ;;
        1 )
            REBACK="${language[edgeStartfail]}\n"
            
            unset logtime run PERMISSION TempProces TempProces1
        ;;
    esac

    [ -n "${Fun_State[Now]}" ] && ${Fun_State[Now]} || exit 0
}

function Create_save_configuration()
{
    ! [ -e "${CONFIGROOM_PATH}" ] && ${CONFIGROOM_PATH}
    echo -e "${language[configselect]}\n"
    
    Input_State 0
    case $INPUT in
        y|yes ) fuck_bash_creaftedge;;
    esac
}

function Relink_Edge()
{
    local logtime
    logtime="${PWD}/log/$(date "+%Y%m%d-%H%M%S").log"
    Accessibility root

    nohup ${PERMISSION} edge ${1} &> ${logtime}

    case $? in
        0 )
            local tmp ip

            ip=$(ip -4 a show "${tmp:3}" | grep -oP "(?<=inet\s)\d+(\.\d+){3}")
            tmp=$(N2Network)cat "$f"|grep
            REBACK="IP: ${ip}\n"

            unset ip f logtime tmp
            ${Fun_State[Now]}
        ;;
        1 )
            REBACK="${f%%.*} ${language[edgeStartfail]}\n"

            unset f logtime tmp
            ${Fun_State[Now]}
        ;;
    esac
}

#n2lc连接解码
function Iris_QuickLink()
{
    [ -z ${1} ] && ${Fun_State[Now]}
    local Base
    Base=$(echo "${1}"|base64 -d)
    local cache1=${Base##*:}
    connect[Node]=${Base%%:*}
    connect[Port]=${cache1%%#*}
    connect[ROOM]=${Base##*#}

    unset Base cache1
    Edge_StartUp_Phase
}

#用户输入
function Input_State()
{
    read -p ">" INPUT || return 0
    [ "$INPUT" == "exit" ] && exit 0
    [[ "${INPUT:0:7}" == "n2lc://" ]] && Iris_QuickLink ${INPUT:7}
    [ "$1" != "0" -a ! "$INPUT" ] && INPUT=0
}

#初始化config
function Fun_Configuration_Generation()
{
cat << EOF > "${CONFIGURATION_PATH}/n2n3.conf"
campus_network=flase,udp
traffic_encryption=flase
enable_broadcast=true
disable_upnp=true
compress_data=no
disable_payload_encryption=flase
user_id=$(openssl rand -hex 8)
EOF
}

function fuck_bash_creaftedge()
{
cat << EFO > "${CONFIGROOM_PATH}/${connect[ROOM]}.conf"
$(for i in "${run[@]}";do echo "$i";done)
EFO
}

#打印辅助功能
function Printing_Method()
{
    local i
    case $1 in
        title   ) for ((i=0;i<${#Title_Mian[@]};i++));do printf "${Title_Mian[$i]}";done;;
        titleA1 ) for ((i=0;i<${#Title_Mian[@]};i++));do printf "${Title_Mian[$i]}\n";done;;
        options ) for ((i=0;i<${#Text_Option[@]};i++));do printf " $i. ${Text_Option[$i]}\n";done;printf "\n";;
    esac
    unset i
}

#交互函数
function Accessibility()
{
    local i
    case $1 in
        root     ) [ $(whoami) != "root" ] && PERMISSION="sudo";;
        COLUMNS1 ) for ((i=0;i<${COLUMNS}-${#BASH_SHELLNAME}-${#BASH_IRIS}-1;i++));do printf "\033[42;37m \033[0m";done;printf "\n\n";;
        rsh      ) for i in {1..$2};do  OAG+="=";done;;
    esac
    unset i
}

#debug工具 
function catch_dog {
    local LEC=$? name i line file
    printf "\nTraceback (most recent call last):\n\n" >&2
    for ((i=${#FUNCNAME[@]}-1;i>=0;--i)); do
        name="${FUNCNAME[$i]}"
        line="${BASH_LINENO[$i]}"
        file="${BASH_SOURCE[$i]}"
        printf "  File ${file@Q}, line ${line}, in ${name@Q}\n" >&2
    done
    printf "\n[Code: ${LEC}]\n" >&2
}

function Genshin_Impact_Starts()
{
[ "$1" == "connet" ] && {
/usr/bin/python <<-EOF
import socket

def tcp_handshake(host, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((host, port))
        print(f"Connect pass")
    except (socket.error, ConnectionRefusedError) as e:
        print(f"Connect fail")
    finally:
        sock.close()

tcp_handshake('$2', 5321)

EOF
}
[ "$1" == "server" ] && {
    :
}
}

function Ctrl_C_MSG()
{
    let Num++ || return 0
    [[ "$Num" = 2 ]] && exit 0
}

[ "$DEBUG" == "1" ] && {
set -o errtrace
trap catch_dog ERR
}

trap 'Ctrl_C_MSG' INT

case $1 in
    ""       ) Main                         ;;
    "server" ) Genshin_Impact_Starts server ;;
esac